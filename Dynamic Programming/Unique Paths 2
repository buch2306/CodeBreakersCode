
#same as unique paths, except that we check for the obstacle during computation of the solution
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if obstacleGrid[0][0]==1 or obstacleGrid[-1][-1]==1 :
            return 0
        
        
        dp = [[0] * len(obstacleGrid[0]) for _ in range(len(obstacleGrid))]

        m = len(obstacleGrid)-1
        n = len(obstacleGrid[0]) - 1
    
        dp[m][n] = 1
    
        for i in range(m-1, -1, -1):
            if obstacleGrid[i][n] != 1:
                dp[i][n] = dp[i+1][n]
    
        for j in range(n-1, -1, -1):
            if obstacleGrid[m][j] != 1:
                dp[m][j] = dp[m][j+1]
    
    
        for i in range(m-1, -1, -1):
            for j in range(n-1, -1, -1):
                if obstacleGrid[i][j] != 1:
                    dp[i][j] = dp[i+1][j] + dp[i][j+1]
    
        return dp[0][0]
            
        
