def knapsack(wt, val, n):
    
    #initializing the dp matrix
    dp = [[0] * (n+1) for _ in range(len(val)+1)]
    
    
    #iterating through the subproblems
    for i in range(len(val)+1):
        for j in range(n+1):
            
            #base case
            if i==0 or j==0:
                dp[i][j] = 0
            
            
            #two options: either take the item or not
            elif j >= wt[i-1]:
                dp[i][j] = max(val[i-1]+dp[i-1][j-wt[i-1]], dp[i-1][j])
            
            #if capacity is lesser than the wt of the the item
            else:
                dp[i][j] = dp[i-1][j]
    
    #return the solution
    return dp[-1][-1]
                
