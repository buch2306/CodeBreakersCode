def hasSingleCycle(array):
	#initializing the counter and the starting index
  count = 0
	index = 0
	
	
  #checking if the counter's count is lesser than the length of the array so as to traverse each element once
	while count < len(array):
		
    # if count is greater than 0, and and index is equal to zero, the we have a cycle
		if count>0 and index==0:
			return False
		
    
    #getting the index of the next element
		jump = array[index]
		
    #incrementing the counter
    count += 1
		
    
    #handling overflow
    jump = (jump + index)%len(array)
		
    #if jump is non-negative, then make the jump index the current index
		if jump>=0:
			index = jump
		
    #handling the negative indexing case, we simply add the negative index to the length of the array to handle overflow
		else:
			index = jump+len(array)
			
	
  #returns boolean value if the index is equal to 0, or False if it's somewhere else
	return index==0
