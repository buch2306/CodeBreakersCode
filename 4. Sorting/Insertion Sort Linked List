# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def insertionSortList(self, head: ListNode) -> ListNode:
        
        #initialize the dummy node
        dummy = ListNode(0)
        
        #pointing the dummy node to the head
        dummy.next = head
        
        #updating the tracker to the head
        cur = head
        
        #iterating through the linked list
        while cur and cur.next:
            
            #if cur.val is greater than the next val, remove the next element and reposition it in the linkedlist
            if cur.val > cur.next.val:
                
                #storing the address of the element to be repositioned
                node_change = cur.next
                
                #rearranging the previos element's pointer
                cur.next = cur.next.next
                
                #checking the correct position of the element
                start = dummy
                while start.next.val < node_change.val:
                    start = start.next
                
                #inserting into the correct position 
                nex = start.next 
                node_change.next = nex
                start.next = node_change
                head = dummy.next
            
            else:
                #if the element is in its current position, increment position of the current pointer
                cur = cur.next
       
        #returnin the head
        return head
